<sect>Evolutionary Computing
<label id="Evolutionary Computing">
    <p>
	Evolutionary computing is actually a broad term for a vast
	array of programming techniques, including genetic algorithms,
	complex adaptive systems, evolutionary programming, etc.
	The main thrust of all these techniques is the idea of
	evolution. The idea that a program can be written that will
	<it>evolve</it> toward a certain goal.  This goal can be
	anything from solving some engineering problem to winning a
	game.

     
    <sect1>EC class/code libraries
    <p>
    
    These are libraries of code or classes for use in programming within
    the evolutionary computation field.  They are not meant as stand alone
    applications, but rather as tools for building your own applications.

    <descrip>

    <label id="ANNEvolve">
    <tag/ANNEvolve/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://annevolve.sourceforge.net/"
                name="annevolve.sourceforge.net">
        </itemize>

        A collection of programs using evolved artificial neural networks to
        solve a series of problems. The long term goal of the project is to
        advance our level of understanding about simulated evolution as a means
        to configure and optimize Artificial Neural Nets (ANNs). The medium
        term goal is to apply our methods to a series of interesting problems
        such as sail boat piloting and playing the game NIM.

        A secondary goal is educational in nature. We attempt to write our
        software with ample explanation, not just for the user, but for the
        engineer/programmer/scientist who wants to understand the innermost
        detail. All of the source code is freely available to anyone to use
        without restriction.

        All of the ANNEvolve software is implemented in C and Python.


    <label id="daga">
    <tag/daga/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://garage.cps.msu.edu/software/daga3.2/"    
                name="garage.cps.msu.edu/software/daga3.2/">
        </itemize>


        daga is an experimental release of a 2-level genetic algorithm  
        compatible with the GALOPPS GA software. It is a meta-GA which
        dynamically evolves a population of GAs to solve a problem presented to
        the lower-level GAs. When multiple GAs (with different operators,
        parameter settings, etc.) are simultaneously applied to the same
        problem, the ones showing better performance have a higher probability
        of surviving and "breeding" to the next macro-generation (i.e.,
        spawning new "daughter"-GAs with characteristics inherited from the
        parental GA or GAs.  In this way, we try to encourage good  
        problem-solving strategies to spread to the whole population of GAs.


    <label id="dgpf">
    <tag/dgpf/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://dgpf.sourceforge.net/"
                name="dgpf.sourceforge.net">
        </itemize>
      
        The Distributed Genetic Programming Framework (DGPF) is a scalable Java
        environment for heuristic, simulation-based search algorithms of any
        kind and Genetic Algorithms in special. We use the broad foundation of
        a search algorithms layer to provide a Genetic Programming system which
        is able to create Turing-complete code.

        It's under the LGPL license. It allows you to use heuristic searches
        like GA and randomized Hill Climbing for any problem space you like to
        with just minimal programming effort. Also, you may distribute all
        these searches over a network, using the client/server, the
        peer-to-peer, or even a client/server+ peer-to-peer hybrid distribution
        scheme. You also can construct heterogeneous search algorithms where GA
        cooperates with Hill Climbing without changing any code.


    <label id="Ease">
    <tag/Ease/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://www.sprave.com/Ease/Ease.html" 
                name="www.sprave.com/Ease/Ease.html">
        </itemize>

        Ease - Evolutionary Algorithms Scripting Evironment - is an extension
        to the Tcl scripting language, providing commands to create, modify,
        and evaluate populations of individuals represented by real number
        vectors and/or bit strings.


    <label id="EO">
    <tag/EO/ 
        <itemize>
            <item>Web site: <htmlurl
                url="http://eodev.sourceforge.net/"
                name="eodev.sourceforge.net">
        </itemize>

        EO is a templates-based, ANSI-C++ compliant evolutionary
        computation library. It contains classes for any kind of
        evolutionary computation (specially genetic algorithms) you might
        come up to. It is component-based, so that if you don't find the
        class you need in it, it is very easy to subclass existing  
        abstract or concrete class.


    <label id="Evocosm">
    <tag/Evocosm/
        <itemize>
            <item>Web site: <htmlurl
                url="http://www.coyotegulch.com/products/libevocosm/">
        </itemize>

	Evocosm is a set of classes that abstract the fundamental components of
	an evolutionary algorithm. See the site for details, but here is a
	simple list of the provided classes; Random Numbers, OpenMP,
	Floating-Point Chromosomes, Roulettte Wheels, Organisms, Fitness
	Landscapes, Evocosms, Fitness Scaling, Migration, Selecting Survivors,
	Reproduction, Mutation Operations.


    <label id="evolver">
    <tag/evolver/
        <itemize>
            <item>Web site: <htmlurl
                url="https://launchpad.net/evolver">
        </itemize>

        A Python library for creating and working with genetic algorithms and
        genetic (evolved) programs. Allows one to do Python-based evolutionary
        programming; string-based as well as source code tree node
        optimization/search solution discovery.


    <label id="Fortran GA">
    <tag/FORTRAN GA/
    <itemize>
        <item>Web site: <htmlurl 
            url="http://cuaerospace.com/carroll/ga.html" 
            name="cuaerospace.com/carroll/ga.html">
    </itemize>
      
        This program is a FORTRAN version of a genetic algorithm driver.
        This code initializes a random sample of individuals with
        different parameters to be optimized using the genetic algorithm
        approach, i.e.  evolution via survival of the fittest.  The
        selection scheme used is tournament selection with a shuffling
        technique for choosing random pairs for mating.  The routine
        includes binary coding for the individuals, jump mutation, creep
        mutation, and the option for single-point or uniform crossover.
        Niching (sharing) and an option for the number of children per
        pair of parents has been added.  More recently, an option for
        the use of a micro-GA has been added.
       

    <label id="FREVO">
    <tag/FREVO/
        <itemize>
            <item>Web site: <htmlurl
                url="http://www.frevotool.tk/">
        </itemize>

        FREVO is an open-source framework developed in Java to help engineers
        and scientists in evolutionary design or optimization tasks. The major
        feature of FREVO is the componentwise decomposition and separation of
        the key building blocks for each optimization tasks. We identify these
        as the problem definition, solution representation and the optimization
        method. This structure enables the components to be designed separately
        allowing the user to easily swap and evaluate different configurations
        and methods or to connect an external simulation tool.


    <label id="GALib">
    <tag/GAlib: Matthew's Genetic Algorithms Library/ 
    <itemize>
        <item>Web Site: <htmlurl 
            url="http://lancet.mit.edu/ga/" 
            name="lancet.mit.edu/ga/"> 
        <item>Download: <htmlurl
            url="http://lancet.mit.edu/ga/dist/" 
            name="lancet.mit.edu/ga/dist/">
        <item>Register GAlib at: <htmlurl 
            url="http://lancet.mit.edu/ga/Register.html" 
            name="lancet.mit.edu/ga/Register.html">
     </itemize>

     
      GAlib contains a set of C++ genetic algorithm objects.  The
      library includes tools for using genetic algorithms to do
      optimization in any C++ program using any representation and genetic
      operators.  The documentation includes an extensive overview of how
      to implement a genetic algorithm as well as examples illustrating
      customizations to the GAlib classes.
     


    <label id="GALOPPS">
    <tag/GALOPPS/
      <itemize>
        <item>Web site: <htmlurl 
            url="http://garage.cse.msu.edu/software/galopps/"> 
        <item>FTP site: <htmlurl 
            url="ftp://garage.cse.msu.edu/pub/GA/galopps/">
      </itemize>

      GALOPPS is a flexible, generic GA, in 'C'.  It was based upon
      Goldberg's Simple Genetic Algorithm (SGA) architecture, in order to
      make it easier for users to learn to use and extend.

      GALOPPS extends the SGA capabilities several fold:
      <itemize>	
            <item> (optional) A new Graphical User Interface, based on TCL/TK, 
                for Unix users, allowing easy running of GALOPPS 3.2 (single 
                or multiple subpopulations) on one or more processors.  GUI 
                writes/reads "standard" GALOPPS input and master files, and 
                displays graphical output (during or after run) of 
                user-selected variables.
	    <item> 5 selection methods: roulette wheel, stochastic remainder
	        sampling, tournament selection, stochastic universal sampling,
	        linear-ranking-then-SUS.
	    <item> Random or superuniform initialization of "ordinary"
	        (non-permutation) binary or non-binary chromosomes; random
	        initialization of permutation-based chromosomes; or 
                user-supplied initialization of arbitrary types of chromosomes.
	    <item> Binary or non-binary alphabetic fields on value-based
	        chromosomes, including different user-definable field sizes.
	    <item> 3 crossovers for value-based representations: 1-pt, 2-pt, and
	        uniform, all of which operate at field boundaries if a 
                non-binary alphabet is used.
	    <item> 4 crossovers for order-based reps: PMX, order-based, uniform
	        order-based, and cycle.
	    <item> 4 mutations: fast bitwise, multiple-field, swap and random
	        sublist scramble.
	    <item> Fitness scaling: linear scaling, Boltzmann scaling, sigma
	        truncation, window scaling, ranking.
	    <item><bf>Plus</bf> a whole lot more....
      </itemize>


    <label id="GAS">
    <tag/GAS/  
      <itemize>
        <item>Web site: <htmlurl
          url="http://starship.python.net/crew/gandalf/">
      </itemize>

      GAS means "Genetic Algorithms Stuff".
      GAS is freeware.

      Purpose of GAS is to explore and exploit artificial evolutions.
      Primary implementation language of GAS is Python.  The GAS
      software package is meant to be a Python framework for applying
      genetic algorithms. It contains an example application where it
      is tried to breed Python program strings.  This special problem
      falls into the category of Genetic Programming (GP), and/or
      Automatic Programming.  Nevertheless, GAS tries to be useful for
      other applications of Genetic Algorithms as well.
     

    <label id="GAUL">
    <tag/GAUL/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://gaul.sourceforge.net/">
            <item>SF project site: <htmlurl 
                url="http://sourceforge.net/projects/gaul/">
        </itemize>

        The Genetic Algorithm Utility Library (GAUL) is a flexible programming
        library designed to aid development of applications that require the
        use of genetic algorithms.  Features include:
        
        <itemize>
            <item>Darwinian, Lamarckian or Baldwinian evolutionary schemes.
            <item>Both steady-state and generation-based GAs included.
            <item>The island model of evolution is available.
            <item>Chromosome datatype agnostic. A selection of common chromosome
                types are built-in.
            <item>Allows user-defined crossover, mutation, selection, adaptation
                and replacement operators.
            <item>Support for multiple, simultaneously evolved,populations.
            <item>Choice of high-level or low-level interface functions.
            <item>Additional, non-GA, optimisation algorithms are built-in for
                local optimisation or comparative purposes.
            <item>Trivial to extend using external code via the built-in code 
                hooks.
            <item>May be driven by, or extended by, powerful S-Lang scripts.
            <item>Support for multiprocessor calculations.
            <item>Written using highly portable C code.
        </itemize>


    <label id="GECO">
    <tag/GECO/
    <itemize>
      <item>FTP site: <htmlurl
            url="http://common-lisp.net/project/geco/">
    </itemize>

     
      GECO (Genetic Evolution through Combination of Objects), an
      extendible object-oriented tool-box for constructing genetic algorithms
      (in Lisp).  It provides a set of extensible classes and methods
      designed for generality. Some simple examples are also provided to
      illustrate the intended use.
     

    <label id="Genetic">
    <tag/Genetic/
        <itemize>
            <item>Web site: ???
            <item>You can get it from the debian repository:
                <htmlurl
                    url="http://packages.qa.debian.org/g/genetic.html">
        </itemize>

        This is a package for genetic algorythms and AI in Python.

        Genetic can typically solve ANY problem that consists to minimize a 
        function.

        It also includes several demos / examples, like the TSP (traveling 
        saleman problem).


    <label id="GPdata">
    <tag/GPdata/
    <itemize>
      <item>FTP site: <htmlurl
        url="ftp://ftp.cs.bham.ac.uk/pub/authors/W.B.Langdon/gp-code/">
      <item>Documentation (GPdata-icga-95.ps): <htmlurl
        url="ftp://cs.ucl.ac.uk/genetic/papers/">
     </itemize>

      GPdata-3.0.tar.gz (C++) contains a version of Andy Singleton's 
      GP-Quick version 2.1 which has been extensively altered to support:
      <itemize>	
        <item>Indexed memory operation (cf. teller)
    	<item>multi tree programs
        <item>Adfs
        <item>parameter changes without recompilation
        <item>populations partitioned into demes
        <item>(A version of) pareto fitness
      </itemize>
      This ftp site also contains a small C++ program (ntrees.cc) to 
      calculate the number of different there are of a given length and 
      given function and terminal set.
     

    <label id="Java GP - gpjpp">
    <tag/gpjpp Genetic Programming in Java/
      <itemize>
          <item>The code can be found in the tarball linked from 
            "GP and Othello Java code and READMEs" on this page: <htmlurl 
              url="http://www1.cs.columbia.edu/~evs/ml/hw4.html">
      </itemize>

      gpjpp is a Java package I wrote for doing research in genetic
      programming. It is a port of the gpc++ kernel written by Adam
      Fraser and Thomas Weinbrenner. Included in the package are
      four of Koza's standard examples: the artificial ant, the
      hopping lawnmower, symbolic regression, and the boolean
      multiplexer. Here is a partial list of its features:
      <itemize>
        <item>graphic output of expression trees
	    <item>efficient diversity checking 
    	<item>Koza's greedy over-selection option for large populations
	    <item>extensible GPRun class that encapsulates most details of a
	        genetic programming test
    	<item>more robust and efficient streaming code, with automatic 
            checkpoint and restart built into the GPRun class
    	<item>an explicit complexity limit that can be set on each GP
	    <item>additional configuration variables to allow more testing 
                without recompilation
	    <item>support for automatically defined functions (ADFs)
	    <item>tournament and fitness proportionate selection
	    <item>demetic grouping
	    <item>optional steady state population
	    <item>subtree crossover
	    <item>swap and shrink mutation
      </itemize>


    <label id="jaga">
    <tag/jaga/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://cs.felk.cvut.cz/&tilde;koutnij/studium/jaga/jaga.html" 
                name="cs.felk.cvut.cz/&tilde;koutnij/studium/jaga/jaga.html">
        </itemize>

        Simple genetic algorithm package written in Java.


    <label id="JGAP">
    <tag/JGAP/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://jgap.sourceforge.net/">
        </itemize>

        JGAP (pronounced "jay-gap") is a Genetic Algorithms and Genetic
        Programming component provided as a Java framework. It provides basic
        genetic mechanisms that can be easily used to apply evolutionary
        principles to problem solutions.

        JGAP was designed to be very easy to use "out of the box", while also
        designed to be highly modular so that more adventurous users can easily
        plug-in custom genetic operators and other sub-components.

        
    <label id="lil-gp">
    <tag/lil-gp/
      <itemize>
        <item>Web site: <htmlurl
            url="http://garage.cps.msu.edu/software/lil-gp/"> 
        <item>FTP site: <htmlurl 
            url="ftp://garage.cps.msu.edu/pub/GA/lilgp/">
      </itemize>

    <tag/patched lil-gp */  
       	<itemize>
            <item>Web site: <htmlurl
            url="http://cs.gmu.edu/~sean/research/lil-gp-patch/">
        </itemize>

      lil-gp is a generic 'C' genetic programming tool. It was written
      with a number of goals in mind: speed, ease of use and support for a
      number of options including:
      <itemize>
	    <item> Generic 'C' program that runs on UNIX workstations
	    <item> Support for multiple population experiments, using 
                arbitrary and user settable topologies for exchange, for 
                a single processor (i.e., you can do multiple population gp 
                experiments on your PC).
	    <item> lil-gp manipulates trees of function pointers which are 
                allocated in single, large memory blocks for speed and to 
                avoid swapping.
      </itemize>
      * The patched lil-gp kernel is strongly-typed, with modifications on 
      multithreading, coevolution, and other tweaks and features.
     

    <label id="Lithos">
    <tag/Lithos/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://www.esatclear.ie/&tilde;rwallace/lithos.html" 
                name="www.esatclear.ie/&tilde;rwallace/lithos.html">
        </itemize>

        Lithos is a stack based evolutionary computation system. Unlike most EC
        systems, its representation language is computationally complete, while
        also being faster and more compact than the S-expressions used in
        genetic programming. The version presented here applies the system to
        the game of Go, but can be changed to other problems by simply plugging
        in a different evaluation function. ANSI C source code is provided.


    <label id="Open BEAGLE">
    <tag/Open BEAGLE/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://beagle.gel.ulaval.ca/"
                name="beagle.gel.ulaval.ca">
        </itemize>

        Open BEAGLE is a C++ evolutionary computation framework. It provides a
        high-level software environment to do any kind of evolutionary
        computation, with support for tree-based genetic programming, bit
        string and real-valued genetic algorithms, evolution strategy,
        co-evolution, and evolutionary multi-objective optimization.


    <label id="PGAPack">
    <tag/PGAPack/ Parallel Genetic Algorithm Library
      <itemize>
        <item>Web site: <htmlurl 
            url="http://www-fp.mcs.anl.gov/CCST/research/reports_pre1998/comp_bio/stalk/pgapack.html" 
            name="www-fp.mcs.anl.gov/CCST/research/reports_pre1998/comp_bio/stalk/pgapack.html">
        <item>FTP site: <htmlurl 
            url="ftp://ftp.mcs.anl.gov/pub/pgapack/" 
            name="ftp.mcs.anl.gov/pub/pgapack/">
      </itemize>

      PGAPack is a general-purpose, data-structure-neutral, parallel
      genetic algorithm library. It is intended to provide most capabilities
      desired in a genetic algorithm library, in an integrated, seamless,
      and portable manner. Key features are in PGAPack V1.0 include:
      <itemize>
        <item>Callable from Fortran or C. 
    	<item>Runs on uniprocessors, parallel computers, and workstation networks.
	    <item>Binary-, integer-, real-, and character-valued native data types. 
	    <item>Full extensibility to support custom operators and new data types. 
	    <item>Easy-to-use interface for novice and application users. 
	    <item>Multiple levels of access for expert users. 
	    <item>Parameterized population replacement. 
    	<item>Multiple crossover, mutation, and selection operators. 
	    <item>Easy integration of hill-climbing heuristics. 
    	<item>Extensive debugging facilities. 
	    <item>Large set of example problems. 
	    <item>Detailed users guide.
      </itemize>
     

      <label id="PIPE">
      <tag/PIPE/   
       <itemize>
        <item>FTP site: <htmlurl 
            url="ftp://ftp.idsia.ch/pub/rafal/" 
            name="ftp.idsia.ch/pub/rafal">
       </itemize>
     
      Probabilistic Incremental Program Evolution (PIPE) is a novel
      technique for automatic program synthesis. The software is written in C. 
      It ...

      <itemize>
    	<item>is easy to install (comes with an automatic installation tool).
	    <item>is easy to use: setting up PIPE&lowbar;V1.0 for different 
            problems requires a minimal amount of programming. User-written, 
            application-independent program parts can easily be reused.
	    <item>is efficient: PIPE&lowbar;V1.0 has been tuned to speed up
            performance.
	    <item>is portable: comes with source code (optimized for SunOS 
                5.5.1).
	    <item>is extensively documented(!) and contains three example
            applications.
	    <item>supports statistical evaluations: it facilitates running
            multiple experiments and collecting results in output files.
	    <item>includes testing tool for testing generalization of evolved
            programs.
	    <item>supports floating point and integer arithmetic.
	    <item>has extensive output features.
	    <item>For lil-gp users: Problems  set up for lil-gp 1.0 can be 
            easily ported to PIPE&lowbar;v1.0. The testing tool can also be
            used to process programs evolved by lil-gp 1.0.
      </itemize>
     

    <label id="plop">
    <tag/plop/
        <itemize>
            <item>Web site: <htmlurl
                url="http://code.google.com/p/plop/">
        </itemize>

        A Common Lisp framework for experimenting with meta-optimizing semantic
        evolutionary search (<htmlurl url="http://metacog.org/doc.html"
        name="MOSES">) and related approaches to learning with probability
        distributions over program spaces based on:

        <itemize>
            <item>reduction to normal form
            <item>representation-building
            <item>deme (sub-population) management
            <item>probabilistic model-building (aka estimation-of-distribution algorithms) 
        </itemize>


    <label id="Pyevolve">
    <tag/Pyevolve/
        <itemize>
            <item>Web site: <htmlurl
                url="http://pyevolve.sourceforge.net/">
        </itemize>

        Pyevolve was developed to be a complete genetic algorithm framework,
        the main objectives of Pyevolve are:

        <itemize>
          <item>written in pure python, to maximize the cross-platform issue;
          <item>easy to use API, the API must be easy for end-user;
          <item>see the evolution, the user can and must see and interact with
          the evolution statistics, graphs and etc;
          <item>extensible, the API must be extensible, the user can create new
          representations, genetic operators like crossover, mutation and etc;
          <item>fast, the design must be optimized for performance;
          <item>common features, the framework must implement the most common
          features: selectors like roulette wheel, tournament, ranking, uniform.
          Scaling schemes like linear scaling, etc;
          <item>default parameters, we must have default operators, settings, 
          etc in all options;
          <item>open-source, the source is for everyone, not for only one.
        </itemize>


    <label id="pygene">
    <tag/pygene/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://www.freenet.org.nz/python/pygene/"
                name="www.freenet.org.nz/python/pygene/">
        </itemize>
        
        pygene is a simple and easily understandable library for genetic
        algorithms and genetic programming in python. Includes examples
        such as the travelling salesman problem.


    <label id="pygp">
    <tag/pygp/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://pygp.sourceforge.net/"
                name="pygp.sourceforge.net/">
        </itemize>

        Your basic genetic algorithm package for python.


    <label id="tinygp">
    <tag/tinygp/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://www.laserpirate.com/as3tinygp/">
        </itemize>

        Small genetic programming library in C++ and ActionScript 3 (Javascript
        engine embedded in Flash) with flash demos.

        This GP library uses the standard Koza expression tree program
        representation. It uses the 'grow' algorithm to generate random
        expressions. Mutation is performed by selecting a random subexpression
        in an expression tree, and replacing it with a new random expression
        (which satisfies the maximum tree depth constraint). Crossover (mating)
        between two expressions is performed by selecting a random
        subexpression in each parent, then exchanging them (although it only
        makes on child, not two).

        In addition to the core code for creating, mutating, mating and
        evaluating expressions, the library includes a steady-state genetic
        algorithm with tournament selection, and a worst-out, elitist
        replacement policy (i.e. when a new child is created, it replaces the
        worse member of the population, only if it is better). 


    <label id="txevolver">
    <tag/txevolver/
        <itemize>
            <item>Web site: <htmlurl
                url="https://launchpad.net/txevolver">
        </itemize>

        A Twisted-based set of libraries for performing calculations of genetic
        algorithms as well as genetic programs in an asynchronous, distributed
        manner.


  </descrip>

     
    <sect1>EC software kits/applications
    <p>
    
    These are various applications, software kits, etc. meant for research
    in the field of evolutionary computing. Their ease of use will vary, as they
    were designed to meet some particular research interest more than as
    an easy to use commercial package.

    <descrip>

      
      <label id="ADATE">
      <tag/ADATE/
    	<itemize>
            <item>Web site: <htmlurl 
                url="http://www-ia.hiof.no/&tilde;rolando/adate&lowbar;intro.html" 
                name="www-ia.hiof.no/&tilde;rolando/adate&lowbar;intro.html">
        </itemize>

	ADATE (Automatic Design of Algorithms Through Evolution) is a system 
        for automatic programming i.e., inductive inference of algorithms, 
        which may be the best way to develop artificial and general 
        intelligence.
	

	The ADATE system can automatically generate non-trivial and novel
	algorithms. Algorithms are generated through large scale combinatorial
	search that employs sophisticated program transformations and
	heuristics. The ADATE system is particularly good at synthesizing
	symbolic, functional programs and has several unique qualities.
       

 
   <label id="esep-xesep">
   <tag/esep & xesep/
    <itemize>
      <item>Web site(esep): <htmlurl 
            url="http://www.iit.edu/&tilde;elrad/esep.html" 
            name="www.iit.edu/&tilde;elrad/esep.html">
      <item>Web site(xesep): <htmlurl 
            url="http://www.iit.edu/&tilde;elrad/xesep.html" 
            name="www.iit.edu/&tilde;elrad/xesep.html">
    </itemize>

     
      This is a new scheduler, called Evolution Scheduler, based on
      Genetic Algorithms and Evolutionary Programming. It lives with
      original Linux priority scheduler.This means you don't have to
      reboot to change the scheduling policy. You may simply use the
      manager program esep to switch between them at any time, and
      esep itself is an all-in-one for scheduling status, commands,
      and administration. We didn't intend to remove the original
      priority scheduler; instead, at least, esep provides you with
      another choice to use a more intelligent scheduler, which
      carries out natural competition in an easy and effective way.
      

      Xesep is a graphical user interface to the esep (Evolution
      Scheduling and Evolving Processes). It's intended to show users
      how to start, play, and feel the Evolution Scheduling and
      Evolving Processes, including sub-programs to display system
      status, evolving process status, queue status, and evolution
      scheduling status periodically in as small as one mini-second.


    <label id="Corewars">
    <tag/Corewars/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://corewars.sourceforge.net/" 
                name="corewars.sourceforge.net/">
            <item>SourceForge site: <htmlurl
                url="http://sourceforge.net/projects/corewars/"
                name="sourceforge.net/projects/corewars/">
        </itemize>
        
        Corewars is a game which simulates a virtual machine with a number of
        programs. Each program tries to crash the others. The program that 
        lasts the longest time wins. A number of sample programs are provided
        and new programs can be written by the player. Screenshots are 
        available at the Corewars homepage.


    <label id="Grany-3">
    <tag/Grany-3/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://zarb.org/~gc/html/grany.html"
                name="zarb.org/~gc/html/grany.html">
        </itemize>

        Grany-3 is a full-featured cellular automaton simulator, made in C++
        with Gtk--, flex++/bison++, doxygen and gettext, useful to granular
        media physicists. 


    <label id="JCASim">
    <tag/JCASim/
        <itemize>
            <item>Web site: <htmlurl 
                url="http://www.jweimar.de/jcasim/"
                name="www.jweimar.de/jcasim/">
        </itemize>

        JCASim is a general-purpose system for simulating cellular automata in
        Java. It includes a stand-alone application and an applet for web
        presentations. The cellular automata can be specified in Java, in CDL,
        or using an interactive dialogue. The system supports many different
        lattice geometries (1-D, 2-D square, hexagonal, triangular, 3-D),
        neighborhoods, boundary conditions, and can display the cells using
        colors, text, or icons.


    <label id="JGProg">
    <tag/JGProg/
        <itemize>
            <item>Web site: <htmlurl
                url="http://jgprog.sourceforge.net/"
                name="jgprog.sourceforge.net">
        </itemize>
        
        Genetic Programming (JGProg) is an open-source Java implementation of
        a strongly-typed Genetic Programming experimentation platform. Two 
        example "worlds" are provided, in which a population evolves and 
        solves the problem.


  </descrip>


     
    
